#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 2) in vec3 vertexColor;
layout(location = 3) in vec3 vertexNormal_modelspace;
layout(location = 6) in mat4 modelsV;

// Output data ; will be interpolated for each fragment.
out vec3 newColor;

out vec4 Position_cameraspace;

out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform bool instanced;
uniform mat4 MV;
uniform mat4 P;

void main(){

    mat4 modelV;

    if( instanced )
	{
	  modelV = modelsV;
	}
	else
	{
	  modelV = MV;
	}
	
	Position_cameraspace = modelV * vec4(vertexPosition_modelspace, 1.0);

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  P * Position_cameraspace;
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( modelV * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;	
	
	Normal_cameraspace = ( modelV * vec4(vertexNormal_modelspace,0)).xyz;
	
	// UV of the vertex. No special space for this one.
	newColor = vertexColor;
	
}
